@page "/siparis/create"
@page "/siparis/update/{id:int}"
@inject ISiparisRepository _siparisrepository
@inject IProductRepository _productrepository
@inject IJSRuntime _JS
@inject NavigationManager _navigationManager
@inject IWebHostEnvironment _webHostEnvironment

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update") Sipariş</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Siparis" OnValidSubmit="UpsertSiparis">
                <DataAnnotationsValidator />
                <div class="border p-6 mt-4">
                    <div  class="form-floating py-6  w-100 p-25 col-25">
                        <select multiple="true" class="form-select p-25 py-6" style="height: 300px; width: 100%;
    font-size: 16px; 
    padding: 10px; " @onchange="OnProductSelected">
                            @foreach (var product in _products)
                            {
                                <option value="@product.Id" selected="@SelectedProductIds.Contains(product.Id)">
                                    @product.Name <br /> @product.Price
                                </option>
                            }
                        </select>
                        <label for="Product"></label>
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Siparis.Masa_no"  class="form-control" id="Masa_no" placeholder="Masa numarası" />
                        <label for="Masa_no">Masa numarası</label>
                        <ValidationMessage For="@(() => Siparis.Masa_no)" />
                    </div>

                    <!-- Toplam Fiyatı Göster -->
                    <div class="form-floating py-3 col-12">
                        <input type="text" class="form-control" value="@TotalPrice.ToString("C")" readonly />
                        <label for="TotalPrice">Toplam Fiyat</label>
                    </div>

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i> @(Id == 0 ? "Create" : "Update")
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="/siparis" class="btn btn-secondary form-control">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Product toplicam { get; set; } = new Product();
    private Siparis Siparis { get; set; } = new Siparis();
    private IEnumerable<Product> _products = new List<Product>();
    private List<int> SelectedProductIds { get; set; } = new List<int>();
    private bool IsProcessing { get; set; } = false;
    private decimal TotalPrice { get; set; } = 0; // Toplam fiyat için değişken

    protected override async Task OnInitializedAsync()
    {
        await LoadSiparisAndProductList();
    }

    private async Task LoadSiparisAndProductList()
    {
        _products = await _productrepository.GetAllAsync();

        if (Id > 0)
        {
            Siparis = await _siparisrepository.GetAsync(Id);
            // Mevcut siparişin seçili ürünlerini listeye ekle
            if (Siparis.ProductIds != null)
            {
                SelectedProductIds = new List<int>(Siparis.ProductIds);
                CalculateTotalPrice(); // Toplam fiyatı hesapla
            }
        }
    }

    private async Task UpsertSiparis()
    {
        IsProcessing = true;

        // Seçili ürünleri sipariş nesnesine ekle
        Siparis.ProductIds = new List<int>(SelectedProductIds);

        if (Siparis.Id == 0)
        {
            await _siparisrepository.CreateAsync(Siparis);
            await _JS.ToastrSuccess( "Yeni sipariş eklendi!");
        }
        else
        {
            await _siparisrepository.UpdateAsync(Siparis);
            await _JS.ToastrSuccess( "Sipariş güncellendi!");
        }

        IsProcessing = false;
        _navigationManager.NavigateTo("/siparis");

    }

    private void OnProductSelected(ChangeEventArgs e)
    {
        var selectedValues = e.Value as IEnumerable<object>;

        if (selectedValues != null)
        {
            SelectedProductIds = selectedValues.Select(v => int.Parse(v.ToString())).ToList();
            CalculateTotalPrice(); // Seçim değiştiğinde toplam fiyatı güncelle
            Siparis.Siparis_tutar = TotalPrice;
        }
    }

    private void CalculateTotalPrice()
    {
        // Seçili ürünlerin fiyatlarını topla
        TotalPrice = _products
            .Where(p => SelectedProductIds.Contains(p.Id))
            .Sum(p => p.Price);
            
    }
}